"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-ke3r=i9e97_*@6!^5%5g@^s-@oj0t*xq-pf0gf$i6y$)loi&va')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# Application domain settings
RAILWAY_PUBLIC_DOMAIN = os.environ.get('RAILWAY_PUBLIC_DOMAIN', 'parsinggrouptg-production.up.railway.app')
ALLOWED_HOSTS = ['*', RAILWAY_PUBLIC_DOMAIN, 'localhost', '127.0.0.1']

# Security Settings
CSRF_TRUSTED_ORIGINS = [
    f'https://{RAILWAY_PUBLIC_DOMAIN}',
    f'http://{RAILWAY_PUBLIC_DOMAIN}',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://healthcheck.railway.app',
    'https://healthcheck.railway.app',
]
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Security settings
SECURE_SSL_REDIRECT = False  # Disable SSL redirect to allow health checks
SECURE_SSL_REDIRECT_EXEMPT = [
    r'^health/',
    r'^\.well-known/acme-challenge/',
]
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Disable CSRF for health checks
CSRF_EXEMPT_PATHS = ['/health/']

def CSRF_TRUSTED_ORIGINS_CALLBACK(request):
    if request.path.startswith('/health/'):
        return True
    return None

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 60 * 24 * 14
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',
    'admin_panel',
    'tg_bot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Railway PostgreSQL configuration
DATABASE_URL = os.environ.get('DATABASE_URL')
RAILWAY_POSTGRES_CONNECTION_STRING = os.environ.get('DATABASE_PUBLIC_URL')

# Try all possible PostgreSQL connection strings
db_connection_urls = [
    DATABASE_URL,
    RAILWAY_POSTGRES_CONNECTION_STRING,
    os.environ.get('POSTGRES_URL'),
    os.environ.get('DATABASE_URL')
]

# Construct DATABASE_URL from individual PostgreSQL variables if needed
if not any(db_connection_urls) and all([
    os.environ.get('PGUSER'),
    os.environ.get('PGPASSWORD'),
    os.environ.get('PGHOST'),
    os.environ.get('PGPORT'),
    os.environ.get('PGDATABASE')
]):
    # Use Railway TCP Proxy if available
    if os.environ.get('RAILWAY_TCP_PROXY_DOMAIN') and os.environ.get('RAILWAY_TCP_PROXY_PORT'):
        db_connection_urls.append(
            f"postgresql://{os.environ.get('PGUSER')}:{os.environ.get('PGPASSWORD')}@"
            f"{os.environ.get('RAILWAY_TCP_PROXY_DOMAIN')}:{os.environ.get('RAILWAY_TCP_PROXY_PORT')}/"
            f"{os.environ.get('PGDATABASE')}?sslmode=require"
        )
    else:
        # Direct connection
        db_connection_urls.append(
            f"postgresql://{os.environ.get('PGUSER')}:{os.environ.get('PGPASSWORD')}@"
            f"{os.environ.get('PGHOST')}:{os.environ.get('PGPORT')}/"
            f"{os.environ.get('PGDATABASE')}"
        )

# Use the first valid connection URL
for url in db_connection_urls:
    if url:
        try:
            import dj_database_url
            DATABASES['default'] = dj_database_url.parse(url)
            print(f"Using database connection: {url.replace(os.environ.get('PGPASSWORD', ''), '********')}")
            break
        except ImportError:
            print("WARNING: dj-database-url package not found. Install with: pip install dj-database-url")
        except Exception as e:
            print(f"Error parsing database URL: {e}")


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = []  # Start with empty list

# Only add static dir if it exists
if os.path.exists(os.path.join(BASE_DIR, 'static')):
    STATICFILES_DIRS.append(os.path.join(BASE_DIR, 'static'))

# Whitenoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'  # Simpler storage backend
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ALLOW_ALL_ORIGINS = True
WHITENOISE_MAX_AGE = 31536000  # 1 year in seconds

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Telegram bot settings from environment variables
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7923260865:AAGWm7t0Zz2PqFPI5PldEVwrOC4HZ_5oP0c')
API_ID = os.environ.get('API_ID', '19840544')
API_HASH = os.environ.get('API_HASH', 'c839f28bad345082329ec086fca021fa')
ADMIN_ID = os.environ.get('ADMIN_ID', '574349489')
BOT_USERNAME = os.environ.get('BOT_USERNAME', '@Channels_hunt_bot')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'admin-panel/'
LOGOUT_REDIRECT_URL = 'login'