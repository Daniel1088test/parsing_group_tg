"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-ke3r=i9e97_*@6!^5%5g@^s-@oj0t*xq-pf0gf$i6y$)loi&va')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application domain settings'
RAILWAY_PUBLIC_DOMAIN = os.environ.get('RAILWAY_PUBLIC_DOMAIN', 'parsinggrouptg-production.up.railway.app')
ALLOWED_HOSTS = ['*', RAILWAY_PUBLIC_DOMAIN, 'localhost', '127.0.0.1']

# Security Settings
CSRF_TRUSTED_ORIGINS = [
    f'https://{RAILWAY_PUBLIC_DOMAIN}',
    f'http://{RAILWAY_PUBLIC_DOMAIN}',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://healthcheck.railway.app',
    'https://healthcheck.railway.app',
]
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Security settings
SECURE_SSL_REDIRECT = False  # Disable SSL redirect to allow health checks
SECURE_SSL_REDIRECT_EXEMPT = [
    r'^health/',
    r'^\.well-known/acme-challenge/',
]
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Disable CSRF for health checks
CSRF_EXEMPT_PATHS = ['/health/']

def CSRF_TRUSTED_ORIGINS_CALLBACK(request):
    if request.path.startswith('/health/'):
        return True
    return None

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 60 * 24 * 14

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',
    'admin_panel',
    'tg_bot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.MediaFilesMiddleware',  # Our middleware to handle missing media files
    'core.health_middleware.HealthCheckMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database Configuration
# Default to SQLite in development, use PostgreSQL in production (Railway)
if 'DATABASE_URL' in os.environ:
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            conn_health_checks=True,
            ssl_require=False,
        )
    }
    # Додаємо додаткові налаштування для PostgreSQL після створення з'єднання
    DATABASES['default'].setdefault('OPTIONS', {})
    DATABASES['default']['OPTIONS']['connect_timeout'] = 60
    
    print(f"Using DATABASE_URL for database connection")
# Якщо DATABASE_URL не вказано, спробуємо використати індивідуальні змінні PostgreSQL
elif all([
    os.environ.get('PGUSER'),
    os.environ.get('PGPASSWORD'),
    os.environ.get('PGHOST'),
    os.environ.get('PGPORT'),
    os.environ.get('PGDATABASE')
]):
    # Конструюємо URL-підключення з окремих змінних
    PGUSER = os.environ.get('PGUSER')
    PGPASSWORD = os.environ.get('PGPASSWORD')
    PGHOST = os.environ.get('PGHOST')
    PGPORT = os.environ.get('PGPORT')
    PGDATABASE = os.environ.get('PGDATABASE')
    
    # Використовуємо dj-database-url для парсингу URL-підключення
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(
            f"postgresql://{PGUSER}:{PGPASSWORD}@{PGHOST}:{PGPORT}/{PGDATABASE}",
            conn_max_age=600,
            conn_health_checks=True,
            ssl_require=False,
        )
    }
    # Додаємо додаткові налаштування для PostgreSQL після створення з'єднання
    DATABASES['default'].setdefault('OPTIONS', {})
    DATABASES['default']['OPTIONS']['connect_timeout'] = 60
    
    print(f"Using PostgreSQL connection from environment variables: {PGHOST}:{PGPORT}/{PGDATABASE}")
else:
    # Якщо жодне з вищевказаних не працює, використовуємо SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    print("Using SQLite database as fallback")

# Static files configuration
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = []

# Add these directories if they exist
if os.path.exists(os.path.join(BASE_DIR, 'static')):
    STATICFILES_DIRS.append(os.path.join(BASE_DIR, 'static'))

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Ensure media directories exist with proper error handling
try:
    # Create media root if it doesn't exist
    if not os.path.exists(MEDIA_ROOT):
        os.makedirs(MEDIA_ROOT, exist_ok=True)
        # Set permissions on the media root directory
        os.chmod(MEDIA_ROOT, 0o755)
    
    # Create messages directory if it doesn't exist
    messages_dir = os.path.join(MEDIA_ROOT, 'messages')
    if not os.path.exists(messages_dir):
        os.makedirs(messages_dir, exist_ok=True)
        # Set permissions on the messages directory
        os.chmod(messages_dir, 0o755)
except Exception as e:
    import sys
    print(f"Warning: Error creating media directories: {str(e)}", file=sys.stderr)
    # Continue execution rather than failing - the application can still function
    # and our middleware will handle missing files gracefully

# Custom storage settings for Railway deployment
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
if not DEBUG and RAILWAY_PUBLIC_DOMAIN:
    # Use custom storage for Railway deployment
    DEFAULT_FILE_STORAGE = 'core.storage.RailwayMediaStorage'

# Whitenoise settings
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_ALLOW_ALL_ORIGINS = True

# Configure logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'app.log'),
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',  # Змінюємо на ERROR для логування тільки критичних помилок бази даних
            'propagate': False,
        },
        'admin_panel': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'tg_bot': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'admin-panel/'
LOGOUT_REDIRECT_URL = 'login'