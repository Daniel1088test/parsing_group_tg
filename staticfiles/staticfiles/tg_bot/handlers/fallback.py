from aiogram import Router, F, types
from aiogram.filters import Command, CommandStart
from tg_bot.keyboards.main_menu import main_menu_keyboard, get_main_menu_keyboard
import logging

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
fallback_router = Router()
logger = logging.getLogger('telegram_bot')

@fallback_router.message(CommandStart())
async def command_start_fallback(message: types.Message):
    """–†–µ–∑–µ—Ä–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start, —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤"""
    try:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
        from tg_bot.handlers.common import cmd_start
        await cmd_start(message)
    except Exception as e:
        logger.error(f"Error in command_start_fallback: {e}")
        # –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ –ø—Ä–∞—Ü—é—î
        dynamic_keyboard = await get_main_menu_keyboard()
        await message.answer(
            "Welcome to Telegram Channel Parser Bot!\nSelect an option from the menu below:",
            reply_markup=dynamic_keyboard
        )

@fallback_router.message(Command("menu"))
async def show_menu(message: types.Message):
    """–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é"""
    try:
        dynamic_keyboard = await get_main_menu_keyboard()
        await message.answer(
            "Main menu:",
            reply_markup=dynamic_keyboard
        )
    except Exception as e:
        logger.error(f"Error in show_menu: {e}")
        await message.answer(
            "Main menu:", 
            reply_markup=main_menu_keyboard
        )

@fallback_router.message(F.text.startswith("/"))
async def unknown_command(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ /"""
    commands_help = (
        "Available commands:\n"
        "/start - Show main menu\n"
        "/help - Show help information\n"
        "/authorize - Start session authorization\n"
        "/menu - Show main menu\n"
    )
    await message.answer(
        f"Unknown command: {message.text}\n\n{commands_help}",
        reply_markup=main_menu_keyboard
    )

@fallback_router.message()
async def handle_any_message(message: types.Message):
    """Catch-all handler for all unhandled messages
    
    This handler will be called when no other handler matches
    """
    try:
        logger.info(f"Unhandled message from user {message.from_user.id}: {message.text[:50] if message.text else '<no text>'}")
        
        # Keyboard with main menu buttons
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üìé List of channels")],
                [types.KeyboardButton(text="üìç Categories menu")],
                [types.KeyboardButton(text="üåê Go to the site")],
                [types.KeyboardButton(text="üîë Add new session")],
            ],
            resize_keyboard=True,
            is_persistent=True
        )
        
        # Send a helpful message with available commands and buttons
        await message.answer(
            "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é\n"
            "/help - –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in fallback handler: {e}")
        # Try to send a simple message without any formatting or keyboards
        try:
            await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        except:
            pass  # If even this fails, just ignore it

@fallback_router.errors()
async def errors_handler(update: types.Update, exception: Exception):
    """Handle errors from other handlers
    
    This handler will catch any exceptions raised in other handlers
    """
    try:
        logger.error(f"Update {update} caused error {exception}")
        
        # Try to get message from update
        message = None
        if hasattr(update, 'message') and update.message:
            message = update.message
        elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:
            message = update.callback_query.message
        
        if message:
            await message.answer(
                "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            
            # Try to show main menu again
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üìé List of channels")],
                    [types.KeyboardButton(text="üìç Categories menu")],
                    [types.KeyboardButton(text="üåê Go to the site")],
                    [types.KeyboardButton(text="üîë Add new session")],
                ],
                resize_keyboard=True,
                is_persistent=True
            )
            
            await message.answer("–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –º–µ–Ω—é:", reply_markup=keyboard)
            
    except Exception as e:
        # Log but don't try to handle further to avoid infinite loops
        logger.error(f"Error handling error: {e}")
        
    # Return True so aiogram knows the error was handled
    return True 