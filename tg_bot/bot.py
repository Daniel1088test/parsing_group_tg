import os
import django
import asyncio
import logging
from datetime import datetime
import sys

# configuration of logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)
logger = logging.getLogger('telegram_bot')

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É Python
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Django
try:
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    django.setup()
    logger.info("Django setup successful")
except Exception as e:
    logger.error(f"Django setup error: {e}")

try:
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–¥—É–ª—ñ
    from aiogram import Bot, Dispatcher, types, F
    from aiogram.fsm.storage.memory import MemoryStorage
    from aiogram.filters import Command
    from tg_bot.handlers import common_router, admin_router, session_router, session_buttons_router, menu_buttons_router, fallback_router
    from tg_bot.middlewares import ChannelsDataMiddleware, MenuInitMiddleware
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –¥–∂–µ—Ä–µ–ª
    def get_bot_token():
        # 1. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        token = os.environ.get('BOT_TOKEN')
        if token:
            logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ BOT_TOKEN –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
            return token
            
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—É –∑ config.py
        try:
            from tg_bot.config import TOKEN_BOT
            if TOKEN_BOT:
                logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ TOKEN_BOT –∑ config.py")
                return TOKEN_BOT
        except ImportError:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ TOKEN_BOT –∑ config.py")
            
        # 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Django
        try:
            from django.conf import settings
            if hasattr(settings, 'BOT_TOKEN') and settings.BOT_TOKEN:
                logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ BOT_TOKEN –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Django")
                return settings.BOT_TOKEN
        except:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Django")
            
        # 4. –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        try:
            from admin_panel.models import BotSettings
            bot_settings = BotSettings.objects.first()
            if bot_settings and bot_settings.bot_token:
                logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
                return bot_settings.bot_token
        except:
            logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
            
        # 5. Railway deployment failsafe - use hardcoded token
        if os.environ.get('RAILWAY_SERVICE_NAME'):
            hardcoded_token = "7923260865:AAGYew9JnOJV6hz0LGeRCb1kS6AejHoX61g"
            logger.warning("Using hardcoded token for Railway deployment")
            return hardcoded_token
            
        # 6. Create a placeholder token and inform the user
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ç–æ–∫–µ–Ω")
        logger.error("‚ö†Ô∏è –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ —Ç–æ–∫–µ–Ω—É, –≤–∏–∫–æ–Ω–∞–π—Ç–µ python fix_token.py")
        return "placeholder_token_fix_me"
    
    # initialize the bot and dispatcher
    TOKEN_BOT = get_bot_token()
    
    # Check if this is a placeholder/invalid token
    if 'placeholder' in TOKEN_BOT.lower() or 'replace' in TOKEN_BOT.lower():
        logger.warning("‚ö†Ô∏è Using placeholder token. Bot will likely fail to connect to Telegram API")
        logger.warning("‚ö†Ô∏è Run 'python fix_token.py' to set a valid token")
    
    try:
        bot = Bot(token=TOKEN_BOT)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # add middleware for channel data and menu initialization
        dp.message.middleware(ChannelsDataMiddleware())
        dp.callback_query.middleware(ChannelsDataMiddleware())
        dp.message.middleware(MenuInitMiddleware())  # Add menu middleware
        
        # Add special command to force menu refresh
        @dp.message(Command("menu"))
        async def force_menu(message: types.Message):
            """Force show the menu keyboard"""
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            
            # Create a keyboard directly
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìé List of channels")],
                    [KeyboardButton(text="üìç Categories menu")],
                    [KeyboardButton(text="üåê Go to the site")],
                    [KeyboardButton(text="üîë Add new session")],
                ],
                resize_keyboard=True,
                is_persistent=True  # Make it persistent
            )
            
            await message.answer("Menu refreshed. You should see the buttons below:", reply_markup=keyboard)
        
        # Add a special handler for menu button text that directly relates to the buttons
        @dp.message(F.text.in_(["Show menu", "–º–µ–Ω—é", "–ú–µ–Ω—é", "menu", "Menu"]))
        async def handle_menu_text(message: types.Message):
            """Handle text requests for menu"""
            await force_menu(message)
        
        # register all routers
        dp.include_router(session_router)
        dp.include_router(session_buttons_router)
        dp.include_router(menu_buttons_router)
        dp.include_router(admin_router)
        dp.include_router(common_router)
        # Fallback router –¥–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–º, —â–æ–± –≤—ñ–Ω –≤–ª–æ–≤–ª—é–≤–∞–≤ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –Ω–µ –±—É–ª–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —ñ–Ω—à–∏–º–∏ —Ä–æ—É—Ç–µ—Ä–∞–º–∏
        dp.include_router(fallback_router)
    except Exception as bot_init_error:
        logger.error(f"Failed to initialize bot: {bot_init_error}")
        logger.error("This is likely due to an invalid bot token.")
        logger.error("Please run 'python fix_token.py' to set a valid token")
        # Re-raise the exception to abort startup
        raise
    
    async def health_check():
        """
        –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è –±–æ—Ç–∞
        –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –±–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞
            bot_info = await bot.get_me()
            return {
                "status": "ok",
                "bot_id": bot_info.id,
                "bot_name": bot_info.username,
                "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
    
    async def main():
        # display information about the bot start
        logger.info("====================================")
        logger.info(f"Bot started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            bot_info = await bot.get_me()
            logger.info(f"Bot ID: {bot_info.id}")
            logger.info(f"Bot name: {bot_info.username}")
        except Exception as e:
            logger.error(f"Error getting bot info: {e}")
            logger.error("Bot token may be invalid! Please check your configuration.")
            return
        
        logger.info("====================================")
        
        # delete all updates that came while the bot was offline
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("Old messages deleted")
        except Exception as e:
            logger.error(f"Error deleting webhook: {e}")
        
        # We don't need to re-register the /start command as it's already in common_router
        # This was overriding the proper handler with a simplified version without keyboard
        
        # start polling
        logger.info("Starting to receive updates...")
        try:
            # Make sure we're using long polling to stay connected
            await dp.start_polling(
                bot, 
                allowed_updates=dp.resolve_used_update_types(),
                polling_timeout=60,  # Longer timeout to maintain connection
                handle_signals=False  # Let the parent process handle signals
            )
        except Exception as e:
            logger.error(f"Error during bot operation: {e}")
            import traceback
            logger.error(traceback.format_exc())
        finally:
            logger.info("Bot stopped")
    
    if __name__ == "__main__":
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–± –∑–∞–ø—É—Å–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
            asyncio.run(main())
        except KeyboardInterrupt:
            logger.info("Bot stopped by keyboard interrupt")
        except Exception as e:
            logger.error(f"Failed to start bot: {e}")
            import traceback
            logger.error(traceback.format_exc())
            sys.exit(1)
except Exception as e:
    logger.error(f"Critical error in bot initialization: {e}")
    import traceback
    logger.error(traceback.format_exc()) 