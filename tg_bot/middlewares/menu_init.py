from typing import Dict, Any, Callable, Awaitable, Set
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
import logging
from tg_bot.keyboards.main_menu import get_default_keyboard, get_main_menu_keyboard
from asgiref.sync import sync_to_async

logger = logging.getLogger('menu_middleware')

class MenuInitMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –º–µ–Ω—é.
    –ì–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∂–¥–∏ –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é.
    """
    
    def __init__(self):
        self.users_with_menu: Set[int] = set()
        self.default_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìé List of channels")],
                [KeyboardButton(text="üìç Categories menu")],
                [KeyboardButton(text="üåê Go to the site")],
                [KeyboardButton(text="üîë Add new session")],
            ],
            resize_keyboard=True,
            is_persistent=True,
            input_field_placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é..."
        )
        logger.info("Menu initialization middleware started")
        logger.info(f"Default keyboard initialized successfully with 4 rows")
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if not isinstance(event, Message):
            return await handler(event, data)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        user_text = event.text if hasattr(event, 'text') and event.text else ''
        logger.info(f"Menu middleware processing message from user {event.from_user.id}: '{user_text}'")
        
        # –°–ø–µ—Ä—à—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫
        try:
            result = await handler(event, data)
        except Exception as e:
            logger.error(f"Error in handler: {e}")
            # –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å –±–∞–∑–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            await event.answer("–í—ñ–¥–±—É–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏.")
            return None
        
        # –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start —ñ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /menu, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        try:
            if not (user_text.startswith('/start') or user_text.startswith('/menu')):
                # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –Ω–µ –æ–¥–Ω–∞ –∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é, –Ω–∞–≥–∞–¥—É—î–º–æ –ø—Ä–æ –º–µ–Ω—é
                menu_texts = ["üìé List of channels", "üìç Categories menu", "üåê Go to the site", "üîë Add new session"]
                if user_text not in menu_texts:
                    try:
                        keyboard = self.default_keyboard
                        await event.answer("–î–æ—Å—Ç—É–ø–Ω–µ –º–µ–Ω—é:", reply_markup=keyboard)
                        logger.info(f"Sent menu to user {event.from_user.id} after handling")
                    except Exception as menu_error:
                        logger.error(f"Error sending menu keyboard: {menu_error}")
        except Exception as e:
            logger.error(f"Error in menu middleware: {e}")
        
        return result 